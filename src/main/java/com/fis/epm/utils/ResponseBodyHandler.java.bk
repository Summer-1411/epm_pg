package com.fis.epm.utils;

import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.MethodParameter;
import org.springframework.core.env.Environment;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;

import com.fis.pg.gw.server.models.ResponseModel;

@RestControllerAdvice(basePackages = { "com.fis" })
public class ResponseBodyHandler extends HandlerInterceptorAdapter implements ResponseBodyAdvice<Object> {
	private static final Logger log = LoggerFactory.getLogger(ResponseBodyHandler.class);

	interface REQUEST_ATTR {
		String REQUEST_ID = "request_id";
		String SESSION_ID = "session_id";
	}

	@Autowired
	Environment env;

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {
		long startTime = System.currentTimeMillis();
		String uuid = UUID.randomUUID().toString();
		request.setAttribute("startTime", startTime);
		response.setHeader(REQUEST_ATTR.REQUEST_ID, uuid);
		log.info("BEGIN " + request.getMethod() + " " + request.getRequestURI() + ",uuid " + uuid);
		return true;
	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		if (request.getAttribute("startTime") != null) {
			long startTime = (long) request.getAttribute("startTime");
			long elapsedTimeMs = System.currentTimeMillis() - startTime;
			log.info("END " + request.getRequestURI() + " in " + elapsedTimeMs + " ms" + " | http-status "
					+ response.getStatus() + ",uuid " + response.getHeader(REQUEST_ATTR.REQUEST_ID));
		}
	}

	@Override
	public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType,
			Class<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request,
			ServerHttpResponse response) {
		// TODO Auto-generated method stub
		StringBuilder sb = new StringBuilder("found response handle request " + returnType.getMethod().getName());

		if (body != null && body instanceof ResponseModel) {
			sb.append(",status code " + ((ResponseModel) body).getStatus());
			sb.append(",message " + ((ResponseModel) body).getMessage());
		}
		log.info(sb.toString());
		return body;
	}
}
